local socket = require("socket")
local GRID_SIZE = 25
local cellSize = 32
local tunnelIdCounter = 1
local tunnelStats = {}
endBtnX = 1520
endBtnY = 250
endBtnW = 80
endBtnH = 80
local predefinedColors = {
    {1, 0, 0},   -- 1. Красный
    {0, 0, 1},   -- 2. Синий
    {0, 1, 0},   -- 3. Зелёный
    {1, 0, 1}    -- 4. Розовый
}
json = require("dkjson")

local isServer = false
local server = nil
local client = nil
local connected = false
local playersData = {}
local menuState = "menu" -- 'menu', 'hosting', 'connected'

local selectedCard = {
    type = nil,
    rotation = 0
}

local cardList = { "straight", "cross", "t", "corner", "deadend", "empty" }

function love.load()
    isServer = false
    client = nil
    server = nil
    connections = {}
    playerId = nil

    font = love.graphics.newFont("assets/fonts/Roboto.ttf", 20)
    love.graphics.setFont(font)

    love.graphics.setBackgroundColor(0.7, 0.7, 0.7)
    love.window.setMode(1920, 1080, {resizable = false})

    tiles = {
        straight = love.graphics.newImage("assets/tiles/Straight.jpg"),
        cross = love.graphics.newImage("assets/tiles/Cross.jpg"),
        t = love.graphics.newImage("assets/tiles/T.jpg"),
        corner = love.graphics.newImage("assets/tiles/Corner.jpg"),
        deadend = love.graphics.newImage("assets/tiles/DeadEnd.jpg"),
        empty = love.graphics.newImage("assets/tiles/Empty.jpg"),
        void = nil
    }

    grid = {}
    for y = 1, GRID_SIZE do
        grid[y] = {}
        for x = 1, GRID_SIZE do
            grid[y][x] = {
                type = "void",
                rotation = 0,
                occupied = false
            }
        end
    end

    players = {}
    currentPlayerIndex = 1 

    playerTurnActive = false
    movingPlayer = false
    currentPlayerIndex = 1
    images = {
    cardBack = love.graphics.newImage("assets/ui/card_back.png"),
    endTurn = love.graphics.newImage("assets/ui/end_turn.jpg")
    }

    selectedFromHand = nil
    drawnCard = nil

    addNewPlayer()
end


function love.update(dt)
    local mx, my = love.mouse.getPosition()
    local winW, winH = love.graphics.getDimensions()
    local cardW, cardH = 128, 192

    -- Обновляем положение карт в руке
    local hand = players[currentPlayerIndex] and players[currentPlayerIndex].hand or {}
    for i, card in ipairs(hand) do
        local handX = winW - 300 + (i - 1) * 40
        local handY = winH - 140 + math.sin(i) * 5
        local angle = math.rad(-30 + i * 10)

        card.x = handX
        card.y = handY

        local tri = getTriangleZonePoints(handX, handY, cardW, cardH, angle, 50, 40)
        card.hover = pointInTriangle(mx, my, unpack(tri))
    end

    -- Обновляем положение вытянутой карты
    if drawnCard then
        local deckW, deckH = 128, 192
        local handX = winW - 150
        local handY = 300
        local angle = 0

        drawnCard.x = handX
        drawnCard.y = handY

        local tri = getTriangleZonePoints(handX, handY, deckW, deckH, angle, 50, 40)
        drawnCard.hover = pointInTriangle(mx, my, unpack(tri))
    end

    -- Сервер: принимаем подключения и обрабатываем входящие данные
    if isServer and server then
        -- Нові підключення
        local conn = server:accept()
        if conn then
            conn:settimeout(0)
            table.insert(connections, conn)

            addNewPlayer()
            local id = #players
            clientToPlayerId[conn] = id
            conn:send("YOURID:" .. id .. "\n")

            broadcastGameState()
        end

        -- Прийом даних від клієнтів
        for i, c in ipairs(connections) do
            local line, err = c:receive()
            if line then
                handleServerMessage(line, c)
            end
        end
    end

    -- Клієнт: приймає оновлення від сервера
    if client and connected then
        local line, err = client:receive()
        if line then
            if line:match("^YOURID:") then
                playerId = tonumber(line:sub(8))
                print("Отримано ID:", playerId)
            elseif line:match("^SYNC:") then
                local jsonData = line:sub(6)
                applyGameState(jsonData)
            end
        end
    end
end

function drawNewCard()
    if not drawnCard then
        drawnCard = drawRandomCard()
    end
end

function addNewPlayer()
    if #players >= 4 then return end

    local spawnX, spawnY, rotation

    if #players == 0 then
        -- Гравець 1 — знизу, має відкрите вверх → поворот = 270
        spawnX = math.ceil(GRID_SIZE / 2)
        spawnY = GRID_SIZE
        rotation = 270
    elseif #players == 1 then
        -- Гравець 2 — зверху, має відкрите вниз → поворот = 90
        spawnX = math.ceil(GRID_SIZE / 2)
        spawnY = 1
        rotation = 90
    elseif #players == 2 then
        -- Гравець 3 — праворуч, має відкрите вліво → поворот = 180
        spawnX = GRID_SIZE
        spawnY = math.ceil(GRID_SIZE / 2)
        rotation = 180
    elseif #players == 3 then
        -- Гравець 4 — ліворуч, має відкрите вправо → поворот = 0
        spawnX = 1
        spawnY = math.ceil(GRID_SIZE / 2)
        rotation = 0
    end

    local newId = tunnelIdCounter
    tunnelIdCounter = tunnelIdCounter + 1

    grid[spawnY][spawnX] = {
        type = "deadend",
        rotation = rotation,
        tunnelId = newId,
        occupied = false
    }

    local exits = 0
    local sides = getOpenSides({type = "deadend", rotation = rotation})
    for _, v in pairs(sides) do
        if v then exits = exits + 1 end
    end

    tunnelStats[newId] = {
        tileCount = 1,
        exitScore = exits
    }

    local hand = {}
    for i = 1, 6 do
        table.insert(hand, {
            type = cardList[math.random(#cardList)],
            rotation = 0,
            x = 0, y = 0,
            hover = false
        })
    end

    table.insert(players, {
        x = spawnX,
        y = spawnY,
        hand = hand,
        color = predefinedColors[#players + 1],
        canMove = false,
        turnStage = "place",
        placedCard = false
    })
end

function pointInTriangle(px, py, ax, ay, bx, by, cx, cy)
    local v0x, v0y = cx - ax, cy - ay
    local v1x, v1y = bx - ax, by - ay
    local v2x, v2y = px - ax, py - ay

    local dot00 = v0x * v0x + v0y * v0y
    local dot01 = v0x * v1x + v0y * v1y
    local dot02 = v0x * v2x + v0y * v2y
    local dot11 = v1x * v1x + v1y * v1y
    local dot12 = v1x * v2x + v1y * v2y

    local invDenom = 1 / (dot00 * dot11 - dot01 * dot01)
    local u = (dot11 * dot02 - dot01 * dot12) * invDenom
    local v = (dot00 * dot12 - dot01 * dot02) * invDenom

    return (u >= 0) and (v >= 0) and (u + v < 1)
end

function drawRandomCard()
    return {
        type = cardList[math.random(#cardList)],
        x = 0,
        y = 0,
        hover = false,
        rotation = 0
    }
end

function getTriangleZonePoints(x, y, w, h, rotation, offsetRight, offsetDown)
    -- Центр карти
    local cx, cy = x, y

    -- Вектор від центру до верхнього лівого кута
    local localX = -w / 2
    local localY = -h / 2

    -- Обертаємо вектор на заданий кут
    local cosR = math.cos(rotation)
    local sinR = math.sin(rotation)

    -- Отримуємо позицію верхнього лівого кута з урахуванням повороту
    local topLeftX = cx + localX * cosR - localY * sinR
    local topLeftY = cy + localX * sinR + localY * cosR

    -- Вектори по сторонам карти
    local sideX = offsetRight * cosR
    local sideY = offsetRight * sinR
    local downX = offsetDown * -sinR
    local downY = offsetDown * cosR

    -- Три точки трикутника від верхнього лівого кута
    local p1x = topLeftX
    local p1y = topLeftY
    local p2x = topLeftX + sideX
    local p2y = topLeftY + sideY
    local p3x = topLeftX + downX
    local p3y = topLeftY + downY

    return {
        p1x, p1y,
        p2x, p2y,
        p3x, p3y
    }
end

function drawCardWithIcon(x, y, w, h, rotation, cardBackImage, cardType, cardRotation, tilesTable, showIcon, scale)
    scale = scale or 1

    -- Рисуем рубашку карты
    local backW, backH = cardBackImage:getWidth(), cardBackImage:getHeight()
    local scaleX = (w / backW) * scale
    local scaleY = (h / backH) * scale

    rotation = rotation or 0

    love.graphics.setColor(1, 1, 1)
    love.graphics.draw(cardBackImage, x, y, rotation,
        scaleX, scaleY,
        backW / 2, backH / 2
    )

    -- Не рисуем иконку, если флаг неактивен или тип не указан
    if not showIcon or not cardType or not tilesTable[cardType] then return end

    -- Подготовка иконки туннеля
    local icon = tilesTable[cardType]
    local iconW, iconH = icon:getWidth(), icon:getHeight()

    -- Настройка масштаба и положения иконки внутри карты
    local iconScaleW = 0.45
    local iconScaleH = 0.27
    local offsetX = 0
    local offsetY = -h * 0.04 * scale  -- масштабируем тоже

    local iconScaleX = (w * iconScaleW * scale) / iconW
    local iconScaleY = (h * iconScaleH * scale) / iconH

    -- Поворот смещения, чтобы иконка учитывала угол карты
    local cosR = math.cos(rotation)
    local sinR = math.sin(rotation)
    local rotatedOffsetX = offsetX * cosR - offsetY * sinR
    local rotatedOffsetY = offsetX * sinR + offsetY * cosR

    -- Рисуем иконку
    love.graphics.draw(icon,
        x + rotatedOffsetX,
        y + rotatedOffsetY,
        rotation,
        iconScaleX, iconScaleY,
        iconW / 2, iconH / 2
    )
end

function getOpenSides(cell)
    local open = {
        straight = {
            [0] = {left=true, right=true},
            [90] = {up=true, down=true},
            [180] = {left=true, right=true},
            [270] = {up=true, down=true}
        },
        cross = {
            [0] = {up=true, down=true, left=true, right=true},
            [90] = {up=true, down=true, left=true, right=true},
            [180] = {up=true, down=true, left=true, right=true},
            [270] = {up=true, down=true, left=true, right=true}
        },
        t = {
            [0] = {left=true, right=true, down=true},
            [90] = {up=true, down=true, right=true},
            [180] = {left=true, right=true, up=true},
            [270] = {up=true, down=true, left=true}
        },
        corner = {
            [0] = {down=true, right=true},
            [90] = {down=true, left=true},
            [180] = {up=true, left=true},
            [270] = {up=true, right=true}
        },
        deadend = {
            [0] = {right=true},
            [90] = {down=true},
            [180] = {left=true},
            [270] = {up=true}
        },
        empty = {
            [0] = {}
        }
    }
    return open[cell.type] and open[cell.type][cell.rotation or 0] or {}
end

function getExitDelta(tileType)
    if tileType == "deadend" then return -1 end
    if tileType == "t" then return 1 end
    if tileType == "cross" then return 2 end
    return 0
end

function mergeTunnels(mainId, otherIds)
    for y = 1, GRID_SIZE do
        for x = 1, GRID_SIZE do
            local cell = grid[y][x]
            if cell.tunnelId and otherIds[cell.tunnelId] then
                cell.tunnelId = mainId
            end
        end
    end

    for id in pairs(otherIds) do
        if id ~= mainId and tunnelStats[id] then
            tunnelStats[mainId].tileCount = tunnelStats[mainId].tileCount + tunnelStats[id].tileCount
            tunnelStats[mainId].exitScore = tunnelStats[mainId].exitScore + tunnelStats[id].exitScore
            tunnelStats[id] = nil
        end
    end
end

function canMove(fromX, fromY, toX, toY)
    local dx, dy = toX - fromX, toY - fromY
    if math.abs(dx) + math.abs(dy) ~= 1 then return false end

    local from = grid[fromY] and grid[fromY][fromX]
    local to = grid[toY] and grid[toY][toX]
    if not from or not to then return false end
    if from.type == "void" or to.type == "void" then return false end

    local fromSides = getOpenSides(from)
    local toSides = getOpenSides(to)

    if dx == 1 then return fromSides.right and toSides.left end
    if dx == -1 then return fromSides.left and toSides.right end
    if dy == 1 then return fromSides.down and toSides.up end
    if dy == -1 then return fromSides.up and toSides.down end

    return false
end

function getConnectedNeighbors(x, y, cardType, rotation)
    local directions = {
        {dx=0, dy=-1, from="up", to="down"},
        {dx=0, dy=1,  from="down", to="up"},
        {dx=-1, dy=0, from="left", to="right"},
        {dx=1, dy=0,  from="right", to="left"}
    }

    local openSides = getOpenSides({type = cardType, rotation = rotation})
    local hasConnection = false

    for _, dir in ipairs(directions) do
        local nx, ny = x + dir.dx, y + dir.dy
        if nx >= 1 and nx <= GRID_SIZE and ny >= 1 and ny <= GRID_SIZE then
            local neighbor = grid[ny][nx]
            if neighbor and neighbor.type ~= "void" then
                local neighborSides = getOpenSides(neighbor)

                local thisSide = openSides[dir.from]
                local neighborSide = neighborSides[dir.to]

                if (thisSide and not neighborSide) or (not thisSide and neighborSide) then
                    return false
                end

                if thisSide and neighborSide then
                    hasConnection = true
                end
            end
        end
    end

    return hasConnection
end

function isPlacementValid(x, y, cardType, rotation)
    if grid[y][x].type ~= "void" then
        return false
    end

    local openSides = getOpenSides({type = cardType, rotation = rotation})
    local directions = {
        {dx=0, dy=-1, side="up", opp="down"},
        {dx=0, dy=1,  side="down", opp="up"},
        {dx=-1, dy=0, side="left", opp="right"},
        {dx=1, dy=0,  side="right", opp="left"}
    }

    -- Обробка пустих тайлів
    if cardType == "empty" then
        for _, dir in ipairs(directions) do
            local nx, ny = x + dir.dx, y + dir.dy
            if nx >= 1 and nx <= GRID_SIZE and ny >= 1 and ny <= GRID_SIZE then
                local neighbor = grid[ny][nx]
                if neighbor and neighbor.type ~= "void" then
                    local neighborSides = getOpenSides(neighbor)
                    if neighborSides[dir.side] then
                        return false
                    end
                end
            end
        end
        return true
    end

    local hasConnection = false
    local seenTunnels = {}
    local totalExitScore = 0
    local overlapCount = 0

    for _, dir in ipairs(directions) do
        local nx, ny = x + dir.dx, y + dir.dy
        if nx >= 1 and nx <= GRID_SIZE and ny >= 1 and ny <= GRID_SIZE then
            local neighbor = grid[ny][nx]
            if neighbor and neighbor.type ~= "void" and neighbor.tunnelId then
                local neighborSides = getOpenSides(neighbor)
                local thisSide = openSides[dir.side]
                local neighborSide = neighborSides[dir.opp]

                if thisSide and neighborSide then
                    hasConnection = true
                    overlapCount = overlapCount + 2
                elseif thisSide ~= neighborSide then
                    return false -- Несовместимое соединение
                end

                if not seenTunnels[neighbor.tunnelId] then
                    seenTunnels[neighbor.tunnelId] = true
                    local stats = tunnelStats[neighbor.tunnelId]
                    if stats then
                        totalExitScore = totalExitScore + stats.exitScore
                    end
                end
            end
        end
    end

    local newExits = 0
    for _, open in pairs(openSides) do
        if open then newExits = newExits + 1 end
    end

    local netScore = totalExitScore + newExits - overlapCount

    if not hasConnection then
        return false
    end

    if cardType == "deadend" then
        if netScore <= 0 then return false end
    end

    if cardType ~= "deadend" then
        if netScore <= 0 then return false end
    end

    return true
end

function endTurn()
    currentPlayerIndex = currentPlayerIndex % #players + 1
end

function love.mousepressed(mx, my, button)

 
    if menuState == "menu" then
        if mx >= 100 and mx <= 400 and my >= 200 and my <= 260 then
            -- Стати сервером
            isServer = true
            server = socket.bind("*", 22122)
            server:settimeout(0)
            connected = true
            menuState = "connected"
            print("Сервер створено")
            return
        elseif mx >= 100 and mx <= 400 and my >= 300 and my <= 360 then
            -- Підключитись як клієнт
            client = socket.tcp()
            client:settimeout(5)
            local success, err = client:connect("127.0.0.1", 22122)
            if success or err == "already connected" then
                connected = true
                menuState = "connected"
                print("Підключено до сервера")
            else
                print("Помилка підключення:", err)
            end
            return
        end
    end

    if not isServer and playerId ~= currentPlayerIndex then
        return
    end
    
    local winW, winH = love.graphics.getDimensions()
    local cardSize = 64
    local cardX = winW - cardSize - 20

    -- Выбор карты
    for i, card in ipairs(cardList) do
        local cardY = 20 + (i - 1) * (cardSize + 10)
        if mx >= cardX and mx <= cardX + cardSize and my >= cardY and my <= cardY + cardSize then
            if button == 1 then
                selectedCard.type = card
                selectedCard.rotation = 0
                return
            end
        end
    end

    -- Поворот карты
    if button == 2 and selectedCard.type then
        selectedCard.rotation = (selectedCard.rotation + 90) % 360
        return
    end

    -- Выбор карты из колоды (drawnCard)
    local currentPlayer = players[currentPlayerIndex]
    if not currentPlayer.placedCard and drawnCard and drawnCard.type and drawnCard.hover and button == 1 then
        selectedCard.type = drawnCard.type
        selectedCard.rotation = drawnCard.rotation or 0
        selectedFromHand = "drawn"
        return
    end
    local hand = players[currentPlayerIndex] and players[currentPlayerIndex].hand or {}
    if drawnCard and selectedFromHand == "drawn" and #hand < 6 and button == 1 then
        local winW, winH = love.graphics.getDimensions()
        local cardW, cardH = 128, 192
        local handY = winH - 140

        local startX = winW - 350
        local zoneW = 5 * 40 + cardW -- фиксированная ширина под 6 карт
        local zoneH = cardH

        if mx >= startX and mx <= startX + zoneW and my >= handY - cardH / 2 and my <= handY + cardH / 2 then
            table.insert(hand, {
                type = drawnCard.type,
                rotation = drawnCard.rotation or 0,
                x = 0, y = 0,
                hover = false
            })

            drawnCard = nil
            selectedCard.type = nil
            selectedCard.rotation = 0
            selectedFromHand = nil
            return
        end
    end
    -- Размещение карты


    if playerId == currentPlayerIndex and players[playerId].turnStage == "place" then
        for i, card in ipairs(hand) do
            local currentPlayer = players[currentPlayerIndex]
            if currentPlayer.placedCard then break end

            if card.hover and button == 1 then
                if drawnCard and selectedFromHand == "drawn" then
                    if #hand < 6 then
                        -- Добавляем в руку, если есть место
                        table.insert(hand, {
                            type = drawnCard.type,
                            rotation = drawnCard.rotation or 0,
                            x = 0, y = 0,
                            hover = false
                        })
                    else
                        -- Если рука полная — заменяем сразу
                        hand[i] = {
                            type = drawnCard.type,
                            rotation = drawnCard.rotation or 0,
                            x = 0, y = 0,
                            hover = false
                        }
                    end

                    -- Очистить
                    drawnCard = nil
                    selectedCard.type = nil
                    selectedCard.rotation = 0
                    selectedFromHand = nil
                    return
                end

                -- Обычный выбор карты из руки
                selectedCard.type = card.type
                selectedCard.rotation = card.rotation or 0
                selectedFromHand = i
                return
            end
        end
    end


    if selectedCard.type and selectedFromHand then
        local offsetX = (winW - cellSize * GRID_SIZE) / 2
        local offsetY = (winH - cellSize * GRID_SIZE) / 2
        local gridX = math.floor((mx - offsetX) / cellSize) + 1
        local gridY = math.floor((my - offsetY) / cellSize) + 1

        if gridX >= 1 and gridX <= GRID_SIZE and gridY >= 1 and gridY <= GRID_SIZE then
            local newType = selectedCard.type
            local newRot = selectedCard.rotation

            if isPlacementValid(gridX, gridY, newType, newRot) then
                if not isServer then
                    -- Якщо клієнт, надсилаємо на сервер
                    local msg = string.format("PLACE:%d,%d,%s,%d", gridX, gridY, newType, newRot)
                    sendToServer(msg) -- ця функція повинна бути в тебе (або додамо)
                    return
                end

                -- Якщо сервер — виконуємо дію локально
                applyPlacement(currentPlayerIndex, gridX, gridY, newType, newRot)
                broadcastGameState() -- функція для розсилки стану всім клієнтам
            end
        end
    end

    -- Перемещение игрока
    if button == 1 and movingPlayer and currentPlayer.turnStage == "move" then
        local offsetX = (winW - cellSize * GRID_SIZE) / 2
        local offsetY = (winH - cellSize * GRID_SIZE) / 2
        local gridX = math.floor((mx - offsetX) / cellSize) + 1
        local gridY = math.floor((my - offsetY) / cellSize) + 1

        if gridX >= 1 and gridX <= GRID_SIZE and gridY >= 1 and gridY <= GRID_SIZE then
            if canMove(currentPlayer.x, currentPlayer.y, gridX, gridY) then

                if not isServer then
                    -- Клієнт: надсилає запит на переміщення
                    sendToServer("MOVE:" .. gridX .. "," .. gridY)
                    movingPlayer = false -- клієнт завершує свій input
                    return
                end

                -- Сервер: виконує переміщення та перехід ходу
                currentPlayer.x = gridX
                currentPlayer.y = gridY
                currentPlayer.turnStage = "done"
                movingPlayer = false

                -- Перехід ходу (для сервера)
                currentPlayerIndex = currentPlayerIndex % #players + 1
                local nextPlayer = players[currentPlayerIndex]
                nextPlayer.turnStage = "place"
                nextPlayer.placedCard = false
                drawnCard = drawRandomCard()

                broadcastGameState()
            end
        end
    end


    -- Кнопка "Кінець ходу"
    if button == 1 and
        mx >= endBtnX and mx <= endBtnX + endBtnW and
        my >= endBtnY and my <= endBtnY + endBtnH
    then
        local player = players[currentPlayerIndex]
        if player.turnStage == "place" then
            player.turnStage = "move"
            movingPlayer = true

        elseif player.turnStage == "move" then
            if not isServer then
                sendToServer("ENDTURN")
                return -- чекаємо SYNC
            end

            -- Сервер завершує хід і передає його далі
            currentPlayerIndex = currentPlayerIndex % #players + 1
            local nextPlayer = players[currentPlayerIndex]
            nextPlayer.turnStage = "place"
            nextPlayer.placedCard = false
            drawnCard = drawRandomCard()
            broadcastGameState()
        end
        return
    end

    local winW, winH = love.graphics.getDimensions()
    local offsetXGrid = (winW - cellSize * GRID_SIZE) / 2
    local offsetYGrid = (winH - cellSize * GRID_SIZE) / 2

    -- Сброс карты, если нажали вне поля и карта выбрана
    if selectedFromHand and not (
        mx >= offsetXGrid and mx <= offsetXGrid + GRID_SIZE * cellSize and
        my >= offsetYGrid and my <= offsetYGrid + GRID_SIZE * cellSize
    ) then
        selectedCard.type = nil
        selectedCard.rotation = 0
        selectedFromHand = nil
    end

    -- Сброс вытянутой карты
    local deckW, deckH = 128, 192
    local deckX = love.graphics.getWidth() - 150
    local deckY = 300

    local winW, winH = love.graphics.getDimensions()
    local offsetXGrid = (winW - cellSize * GRID_SIZE) / 2
    local offsetYGrid = (winH - cellSize * GRID_SIZE) / 2

    local inGrid = (
        mx >= offsetXGrid and mx <= offsetXGrid + GRID_SIZE * cellSize and
        my >= offsetYGrid and my <= offsetYGrid + GRID_SIZE * cellSize
    )

    if playerId == currentPlayerIndex and players[playerId].turnStage == "place" then
        if drawnCard and not inGrid and not (
            mx >= deckX - deckW/2 and mx <= deckX + deckW/2 and
            my >= deckY - deckH/2 and my <= deckY + deckH/2
        ) and not selectedFromHand then
            drawnCard = nil
        end
    end
end

function drawCardPreview(cardType, x, y, size, rotation)
    local texture = tiles[cardType] or tiles.empty
    love.graphics.setColor(1, 1, 1, 1)
    love.graphics.draw(texture, x + size / 2, y + size / 2, math.rad(rotation),
        size / texture:getWidth(),
        size / texture:getHeight(),
        texture:getWidth() / 2,
        texture:getHeight() / 2)
    love.graphics.setColor(0, 0, 0)
    love.graphics.rectangle("line", x, y, size, size)
end

function love.draw()

    if menuState == "menu" then
        love.graphics.setColor(0.3, 0.6, 0.3)
        love.graphics.rectangle("fill", 100, 200, 300, 60)
        love.graphics.setColor(1, 1, 1)
        love.graphics.printf("Створити гру (Сервер)", 100, 215, 300, "center")

        love.graphics.setColor(0.3, 0.3, 0.8)
        love.graphics.rectangle("fill", 100, 300, 300, 60)
        love.graphics.setColor(1, 1, 1)
        love.graphics.printf("Приєднатися до гри (Клієнт)", 100, 315, 300, "center")
        return
    end

    local cardSize = 32
    local winW, winH = love.graphics.getDimensions()
    local offsetX = (winW - cellSize * GRID_SIZE) / 2
    local offsetY = (winH - cellSize * GRID_SIZE) / 2

    for y = 1, GRID_SIZE do
        for x = 1, GRID_SIZE do
            local cell = grid[y][x]
            local drawX = offsetX + (x - 1) * cellSize
            local drawY = offsetY + (y - 1) * cellSize
            local texture = tiles[cell.type]
            local rotation = math.rad(cell.rotation or 0)

            if texture then
                love.graphics.setColor(1, 1, 1)
                love.graphics.draw(texture, drawX + cellSize / 2, drawY + cellSize / 2,
                    rotation,
                    cellSize / texture:getWidth(),
                    cellSize / texture:getHeight(),
                    texture:getWidth() / 2,
                    texture:getHeight() / 2)
            end

            -- Рамки
            local neighbors = {
                up = (y > 1) and grid[y - 1][x] or nil,
                down = (y < GRID_SIZE) and grid[y + 1][x] or nil,
                left = (x > 1) and grid[y][x - 1] or nil,
                right = (x < GRID_SIZE) and grid[y][x + 1] or nil
            }

            love.graphics.setColor(0, 0, 0)
            if not neighbors.up or neighbors.up.type == "void" then
                love.graphics.line(drawX, drawY, drawX + cellSize, drawY)
            end
            if not neighbors.down or neighbors.down.type == "void" then
                love.graphics.line(drawX, drawY + cellSize, drawX + cellSize, drawY + cellSize)
            end
            if not neighbors.left or neighbors.left.type == "void" then
                love.graphics.line(drawX, drawY, drawX, drawY + cellSize)
            end
            if not neighbors.right or neighbors.right.type == "void" then
                love.graphics.line(drawX + cellSize, drawY, drawX + cellSize, drawY + cellSize)
            end
        end
    end

    -- Панель карт
    -- local cardSize = 64
    -- local cardX = winW - cardSize - 20
    -- for i, card in ipairs(cardList) do
    --    local cardY = 20 + (i - 1) * (cardSize + 10)
    --    drawCardPreview(card, cardX, cardY, cardSize, 0)
    --end

    -- Превью выбранной карты
    if selectedCard.type then
        local mx, my = love.mouse.getPosition()
        drawCardPreview(selectedCard.type, mx - cardSize / 2, my - cardSize / 2, cardSize, selectedCard.rotation)
    end

    -- Отрисовка всех игроков
    for i, p in ipairs(players) do
        local px = offsetX + (p.x - 1) * cellSize + cellSize / 2
        local py = offsetY + (p.y - 1) * cellSize + cellSize / 2

        -- Всегда основной цвет игрока
        love.graphics.setColor(p.color)
        love.graphics.circle("fill", px, py, cellSize / 4)

        -- Если активный — рисуем рамку
        if i == currentPlayerIndex then
            if movingPlayer then
                love.graphics.setColor(1, 0.4, 0)
            else
                love.graphics.setColor(1, 1, 0)
            end
            love.graphics.setLineWidth(3)
            love.graphics.circle("line", px, py, cellSize / 4 + 2)
        end
    end

    -- Вытянутая карта (drawnCard)
    if drawnCard then
        local angle = 0
        if not drawnCard.hover then
            drawCardWithIcon(drawnCard.x, drawnCard.y, 128, 192, angle, images.cardBack, drawnCard.type, drawnCard.rotation, tiles, true, 1)
        else
            drawCardWithIcon(drawnCard.x, drawnCard.y, 128, 192, angle, images.cardBack, drawnCard.type, drawnCard.rotation, tiles, true, 1.2)
            local tri = getTriangleZonePoints(drawnCard.x, drawnCard.y, 128, 192, angle, 50, 40)
            love.graphics.setColor(1, 0, 0, 0.3)
            love.graphics.polygon("fill", tri)
        end
    end
    -- Рисуем руку игрока
    local cardW, cardH = 128, 192

    -- Сначала рисуем все НЕ наведённые карты
    local hand = players[currentPlayerIndex] and players[currentPlayerIndex].hand or {}
    for i, card in ipairs(hand) do
        local angle = math.rad(-30 + i * 10)
        if not card.hover then
            drawCardWithIcon(card.x, card.y, cardW, cardH, angle,
                images.cardBack, card.type, card.rotation, tiles, true, 1)
        end
    end

    -- Потом наведённые — они сверху и масштабируются
    for i, card in ipairs(hand) do
        local angle = math.rad(-30 + i * 10)
        if card.hover then
            drawCardWithIcon(card.x, card.y, cardW, cardH, angle,
                images.cardBack, card.type, card.rotation, tiles, true, 1.2)

                    local tri = getTriangleZonePoints(card.x, card.y, cardW, cardH, angle, 50, 40)
                    love.graphics.setColor(1, 0, 0, 0.3)
                    love.graphics.polygon("fill", tri)
        end
    end

    local endBtnW = 80
    local endBtnH = 80
    local endBtnX = winW - 400
    local endBtnY = 250

    love.graphics.setColor(1, 1, 1)
    love.graphics.draw(images.endTurn, endBtnX, endBtnY, 0,
        endBtnW / images.endTurn:getWidth(),
        endBtnH / images.endTurn:getHeight()
    )

    drawPlayerInfo()
end

function serializeGameState()
    local simplePlayers = {}
    for _, p in ipairs(players) do
        table.insert(simplePlayers, {
            x = p.x,
            y = p.y,
            hand = p.hand,
            color = p.color,
            canMove = p.canMove,
            turnStage = p.turnStage,
            placedCard = p.placedCard
        })
    end

    return json.encode({
        grid = grid,
        players = simplePlayers,
        currentPlayerIndex = currentPlayerIndex,
        drawnCard = drawnCard
    })
end

function applyGameState(jsonData)
    local state = json.decode(jsonData)
    if not state then return end

    grid = state.grid
    players = state.players
    currentPlayerIndex = state.currentPlayerIndex
    drawnCard = state.drawnCard
end

function deserializeGameState(data)
    local decoded = json.decode(data)
    grid = decoded.grid
    players = decoded.players
    currentPlayerIndex = decoded.currentPlayerIndex
    drawnCard = decoded.drawnCard
end
function sendToServer(msg)
    if client then
        client:send(msg .. "\n")
    end
end

function applyPlacement(playerIndex, x, y, tileType, rotation)
    local player = players[playerIndex]
    grid[y][x].type = tileType
    grid[y][x].rotation = rotation
    player.placedCard = true

    local neighbors = {}
    for _, dir in ipairs({{0,-1}, {0,1}, {-1,0}, {1,0}}) do
        local nx, ny = x + dir[1], y + dir[2]
        if nx >= 1 and nx <= GRID_SIZE and ny >= 1 and ny <= GRID_SIZE then
            local neighbor = grid[ny][nx]
            if neighbor.tunnelId then
                table.insert(neighbors, neighbor.tunnelId)
            end
        end
    end

    local idToUse
    if #neighbors == 0 then
        idToUse = tunnelIdCounter
        tunnelIdCounter = tunnelIdCounter + 1
        tunnelStats[idToUse] = {tileCount = 0, exitScore = 0}
    else
        idToUse = neighbors[1]
        local toMerge = {}
        for _, tid in ipairs(neighbors) do
            if tid ~= idToUse then
                toMerge[tid] = true
            end
        end
        if next(toMerge) then
            mergeTunnels(idToUse, toMerge)
        end
    end

    grid[y][x].tunnelId = idToUse
    tunnelStats[idToUse].tileCount = tunnelStats[idToUse].tileCount + 1
    tunnelStats[idToUse].exitScore = tunnelStats[idToUse].exitScore + getExitDelta(tileType)

    -- Видаляємо карту
    if selectedFromHand == "drawn" then
        drawnCard = nil
    else
        table.remove(player.hand, selectedFromHand)
    end

    selectedFromHand = nil
    selectedCard.type = nil
    selectedCard.rotation = 0
end

function broadcastGameState()
    local state = serializeGameState()
    for _, c in ipairs(connections) do
        c:send("SYNC:" .. state .. "\n")
    end
end

function drawPlayerInfo()
    local baseX = 20
    local baseY = 100
    local spacingY = 30

    for i, player in ipairs(players) do
        local text = "Гравець " .. i

        -- Справжній сервер
        if isServer and i == 1 then
            text = text .. " (Сервер)"
        end

        -- Цей клієнт
        if not isServer and i == playerId then
            text = text .. " (Я)"
        end

        -- Поточний хід
        if i == currentPlayerIndex then
            text = "➤ " .. text
        end

        love.graphics.setColor(player.color)
        love.graphics.rectangle("fill", baseX - 5, baseY + (i - 1) * spacingY - 5, 160, 25, 4, 4)

        love.graphics.setColor(1, 1, 1)
        love.graphics.print(text, baseX, baseY + (i - 1) * spacingY)
    end
end

function handleServerMessage(msg, client)
    local cmd, data = msg:match("^(%w+):(.*)$")
    local pid = clientToPlayerId[client]
    if not pid then return end
    local player = players[pid]

    if cmd == "PLACE" then
        local x, y, tileType, rot = data:match("^(%d+),(%d+),([%w_]+),(%d+)$")
        x, y, rot = tonumber(x), tonumber(y), tonumber(rot)

        if player.turnStage == "place" and isPlacementValid(x, y, tileType, rot) then
            applyPlacement(pid, x, y, tileType, rot)
            broadcastGameState()
        end

    elseif cmd == "MOVE" then
        local x, y = data:match("^(%d+),(%d+)$")
        x, y = tonumber(x), tonumber(y)

        if player.turnStage == "move" and canMove(player.x, player.y, x, y) then
            player.x = x
            player.y = y
            player.turnStage = "done"
            movingPlayer = false
            broadcastGameState()
        end

    elseif cmd == "ENDTURN" then
        if player.turnStage == "move" or player.turnStage == "done" then
            currentPlayerIndex = currentPlayerIndex % #players + 1
            local nextPlayer = players[currentPlayerIndex]
            nextPlayer.turnStage = "place"
            nextPlayer.placedCard = false
            drawnCard = drawRandomCard()
            broadcastGameState()
        end
    end
end